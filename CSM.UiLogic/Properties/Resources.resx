<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="CustomLevels_Delete_Caption" xml:space="preserve">
    <value>Delete custom level</value>
  </data>
  <data name="CustomLevels_Delete_Content" xml:space="preserve">
    <value>Do you want to delete the selected custom level?</value>
  </data>
  <data name="CustomLevels_MultipleCustomLevelsLoaded" xml:space="preserve">
    <value>{0} custom levels loaded</value>
    <comment>Used to show that multiple custom levels have been loaded on the custom levels workspace</comment>
  </data>
  <data name="CustomLevels_NoCustomLevelsLoaded" xml:space="preserve">
    <value>No custom levels loaded</value>
    <comment>Used to show that no custom level has been loaded on the custom levels workspace</comment>
  </data>
  <data name="CustomLevels_OneCustomLevelLoaded" xml:space="preserve">
    <value>1 custom level loaded</value>
    <comment>Used to show that one custom level has been loaded on the custom levels workspace</comment>
  </data>
  <data name="No" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="OK" xml:space="preserve">
    <value>OK</value>
  </data>
  <data name="Playlists_AddPlaylistFolder_Caption" xml:space="preserve">
    <value>Add new playlist folder</value>
  </data>
  <data name="Playlists_AddPlaylistFolder_Content" xml:space="preserve">
    <value>Enter the name of the new playlist folder</value>
  </data>
  <data name="Playlists_AddPlaylist_Caption" xml:space="preserve">
    <value>Add new playlist</value>
  </data>
  <data name="Playlists_AddPlaylist_Content" xml:space="preserve">
    <value>Enter the name of the new playlist</value>
  </data>
  <data name="Playlists_DeletePlaylistFolder_Caption" xml:space="preserve">
    <value>Delete folder</value>
  </data>
  <data name="Playlists_DeletePlaylistFolder_Content" xml:space="preserve">
    <value>Do you want to delete the selected folder? All playlists within this folder will be deleted too!</value>
  </data>
  <data name="Playlists_DeletePlaylist_Caption" xml:space="preserve">
    <value>Delete playlist</value>
  </data>
  <data name="Playlists_DeletePlaylist_Content" xml:space="preserve">
    <value>Do you want to delete the selected playlist?</value>
  </data>
  <data name="Playlists_SongName_NA" xml:space="preserve">
    <value>NA (Try to use Tools to fix this issue)</value>
  </data>
  <data name="Playlists_WrongFolderName_Caption" xml:space="preserve">
    <value>Add new folder</value>
  </data>
  <data name="Playlist_WrongFileName_Caption" xml:space="preserve">
    <value>Add new playlist</value>
  </data>
  <data name="Playlist_WrongFileName_Content" xml:space="preserve">
    <value>The name for the new playlist is not valid</value>
  </data>
  <data name="Playlist_WrongFolderName_Content" xml:space="preserve">
    <value>The name for the new folder is not valid</value>
  </data>
  <data name="Settings_BeatSaber_FileDialog" xml:space="preserve">
    <value>Unable to open file dialog</value>
  </data>
  <data name="Settings_BeatSaber_FileDialog_Error" xml:space="preserve">
    <value>Unable to open file dialog. You can find more information in the log file.</value>
  </data>
  <data name="Settings_BeatSaber_ValidatePath_Caption" xml:space="preserve">
    <value>Wrong path</value>
  </data>
  <data name="Settings_BeatSaber_ValidatePath_Content" xml:space="preserve">
    <value>Path does not exist. Please enter a new path</value>
  </data>
  <data name="Settings_Title" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="Workspace_CustomLevels" xml:space="preserve">
    <value>Custom Levels</value>
  </data>
  <data name="Workspace_Playlists" xml:space="preserve">
    <value>Playlists</value>
  </data>
  <data name="Workspace_Tools" xml:space="preserve">
    <value>Tools</value>
  </data>
  <data name="Workspace_Twitch" xml:space="preserve">
    <value>Twitch</value>
  </data>
  <data name="Yes" xml:space="preserve">
    <value>Yes</value>
  </data>
</root>